#!/bin/bash

# rsync -avhP --exclude=tmp --exclude=.git --exclude=env --exclude="*~" --exclude=logs --exclude=results --exclude=__pycache__ /home/glic3/Dropbox/basefs root@calmisko.org:

#if [[ -e /home/glic3/Dropbox/basefs/ ]]; then
#    export BASEFSPATH=/home/glic3/Dropbox/basefs/
#else
#    export BASEFSPATH=/root/basefs/
#fi
#export PYTHONPATH=$BASEFSPATH

. $(dirname "${BASH_SOURCE[0]}")/utils.sh

if [[ $(whoami) != 'root' ]]; then
    echo "Root permissions are required for running basefs resources"
    exit 3
fi


function conv () {
    rm -fr $BASEFSPATH/tmp/rounds
    mkdir -p $BASEFSPATH/tmp/rounds
    nodes=29
    rounds=( 1 2 4 6 8 12 16 24 32 48 64 86 128 192 256 )
#    mkdir $BASEFSPATH/tmp/testpoint && populate
    repetitions=${2:-30}
    echo "Staring $(date)" > /tmp/eval_conv
    rm $BASEFSPATH/tmp/logs/*
    for i in $(seq 1 $repetitions); do
        mkdir -p $BASEFSPATH/tmp/logs
        echo "$1" "$nodes"
        dock "$1" "$nodes" &
        pid=$!
        cpid=$(pgrep -P $pid basefs)
        trap "kill -INT $cpid; kill $pid 2> /dev/null; bstop; killall basefs; kill $$ 2> /dev/null; kill $cpid;" INT
        sleep 30
        sleep $(( $nodes*2 ))
        while [[ $(ls $BASEFSPATH/tmp/logs/ | wc -l) -ne $(($(($nodes+1))*2)) ]]; do
            kill -INT $(ps aux|grep '/usr/local/bin/basefs mount test /tmp/test/ -iface docker0'|awk {'print $2'}|head -n 1)
            sleep 1
            bstop
            sleep 10
            rm $BASEFSPATH/tmp/logs/*
            echo "$1" "$nodes"
            dock "$1" "$nodes" &
            pid=$!
            cpid=$(pgrep -P $pid basefs)
            trap "kill -INT $cpid; kill $pid 2> /dev/null; bstop; killall basefs; kill $$ 2> /dev/null; kill $cpid;" INT
            sleep 30
            sleep $(( $nodes*2 ))
        done
        for j in ${rounds[@]}; do
            echo "$(date) cp $BASEFSPATH/tmp/testpoint/testfile-$j /tmp/test/" >> /tmp/eval_status
            cp $BASEFSPATH/tmp/testpoint/testfile-$j /tmp/test/
            sleep 3
            uid=$(grep " basefs.fs: Sending entry " $BASEFSPATH/tmp/logs/node-0 | tail -n 1 | sed -E "s#([^:]+)\s*2016/01/.*2016-01-#\12016-01-#" | awk {'print $7'})
            echo "UID $uid" >> /tmp/eval_conv
            #sleep $((10+($j/3)))
            counter=0
            if [[ $j -eq 256 ]]; then
                counter_wait=5000
            else
                counter_wait=2000
            fi
            while [[ $(grep "COMPLETED $uid" $BASEFSPATH/tmp/logs/node-* | wc -l) -lt $nodes && $counter -lt $counter_wait ]]; do
                sleep 3
                counter=$(($counter+1))
                echo "COUNTER $counter" >> /tmp/eval_conv
            done
        done
        kill -INT $(ps aux|grep '/usr/local/bin/basefs mount test /tmp/test/ -iface docker0'|awk {'print $2'}|head -n 1)
        sleep 1
        kill -INT $(ps aux|grep '/usr/local/bin/basefs mount test /tmp/test/ -iface docker0'|awk {'print $2'}|head -n 1)
        bstop
        sleep 3
        bstop
        killall basefs
        mv $BASEFSPATH/tmp/logs $BASEFSPATH/tmp/rounds/logs-$i
    done
    trap - INT
}


function replace () {
    rm -fr $2
    cp -r $1 $2
    rm -fr $1
}


function syncprotocol () {
    while [[ $(ps aux | grep basefs | grep -v grep) ]]; do
        sleep 60;
    done
    sed -i "s/^    MAX_BLOCK_MESSAGES = [0-9].*/    MAX_BLOCK_MESSAGES = 0/" $BASEFSPATH/basefs/gossip.py
    intervals=( 1 2 4 8 16 32 64 128 )
    for interval in ${intervals[@]}; do
        sed -i "s/^    FULL_SYNC_INTERVAL = [0-9].*/    FULL_SYNC_INTERVAL = $interval/" $BASEFSPATH/basefs/sync.py
        conv 'sleep $(shuf -i 6-15 -n 1);
            basefs genkey;
            basefs get test ${docker_ip};
            basefs resources test -l -r > /mnt/tmp/logs/node-$ix-resources &
            mkdir -p /tmp/test;
            basefs mount test /tmp/test -d &> /mnt/tmp/logs/node-$ix' 1
        replace $BASEFSPATH/tmp/rounds/ $BASEFSPATH/tmp/sync-$interval
    done
}


function runconv () {
    if [[ "$1" == "gossip" ]]; then
        sed -i "s/^    MAX_BLOCK_MESSAGES = [0-9].*/    MAX_BLOCK_MESSAGES = 9999/" $BASEFSPATH/basefs/gossip.py
        sed -i "s/^    FULL_SYNC_INTERVAL = [0-9].*/    FULL_SYNC_INTERVAL = 6600/" $BASEFSPATH/basefs/sync.py
    elif [[ "$1" == "basefs" ]]; then
        sed -i "s/^    MAX_BLOCK_MESSAGES = [0-9].*/    MAX_BLOCK_MESSAGES = 10/" $BASEFSPATH/basefs/gossip.py
        sed -i "s/^    FULL_SYNC_INTERVAL = [0-9].*/    FULL_SYNC_INTERVAL = 20/" $BASEFSPATH/basefs/sync.py
    elif [[ "$1" == "sync-only" ]]; then
        sed -i "s/^    MAX_BLOCK_MESSAGES = [0-9].*/    MAX_BLOCK_MESSAGES = 0/" $BASEFSPATH/basefs/gossip.py
        intervals=( 1 2 4 8 16 32 64 128 )
        for interval in ${intervals[@]}; do
            sed -i "s/^    FULL_SYNC_INTERVAL = [0-9].*/    FULL_SYNC_INTERVAL = $interval/" $BASEFSPATH/basefs/sync.py
            runconv 'sync' "$2" "$3" "-interval-$interval"
        done
    elif [[ "$1" != "sync" ]]; then
        return
    fi
    if [[ "$2" == "delay" ]]; then
        conv "sleep $(shuf -i 6-15 -n 1);
            basefs genkey;
            basefs get test \${docker_ip};
            basefs resources test -l -r > /mnt/tmp/logs/node-\$ix-resources &
            tc qdisc add dev eth0 root handle 1:0 netem delay ${3}ms $(echo ${3}*0.2|bc|cut -d'.' -f1)ms distribution normal
            mkdir -p /tmp/test;
            basefs mount test /tmp/test -d &> /mnt/tmp/logs/node-\$ix" 1
    elif [[ "$2" == "loss" ]]; then
        conv "sleep $(shuf -i 6-15 -n 1);
            basefs genkey;
            basefs get test \${docker_ip};
            basefs resources test -l -r > /mnt/tmp/logs/node-\$ix-resources &
            tc qdisc add dev eth0 root handle 1:0 netem loss $3 25%;
            mkdir -p /tmp/test;
            basefs mount test /tmp/test -d &> /mnt/tmp/logs/node-\$ix" 1
    elif [[ "$2" == "bw" ]]; then
        conv "sleep $(shuf -i 6-15 -n 1);
            basefs genkey;
            basefs get test \${docker_ip};
            basefs resources test -l -r > /mnt/tmp/logs/node-\$ix-resources &
            tc qdisc add dev eth0 handle 1: root htb default 11
            tc class add dev eth0 parent 1: classid 1:1 htb rate $3kbit
            tc class add dev eth0 parent 1:1 classid 1:11 htb rate $3kbit
            mkdir -p /tmp/test;
            basefs mount test /tmp/test -d &> /mnt/tmp/logs/node-\$ix" 1
    elif [[ "$2" == "reorder" ]]; then
        conv "sleep $(shuf -i 6-15 -n 1);
            basefs genkey;
            basefs get test \${docker_ip};
            basefs resources test -l -r > /mnt/tmp/logs/node-\$ix-resources &
            tc qdisc add dev eth0 root handle 1:0 netem reorder $3% 25%;
            mkdir -p /tmp/test;
            basefs mount test /tmp/test -d &> /mnt/tmp/logs/node-\$ix" 1
    elif [[ "$2" == "baseline" ]]; then
        conv "sleep $(shuf -i 6-15 -n 1);
            basefs genkey;
            basefs get test \${docker_ip};
            basefs resources test -l -r > /mnt/tmp/logs/node-\$ix-resources &
            mkdir -p /tmp/test;
            basefs mount test /tmp/test -d &> /mnt/tmp/logs/node-\$ix" 1
    else
        return
    fi
    replace $BASEFSPATH/tmp/rounds/ $BASEFSPATH/tmp/$1-$2-$3$4
}


function resourceusage () {
    #root@XPS13:/etc# find /etc -type f | wc -l
    #2512
    #root@XPS13:/etc# find /etc -type d | wc -l
    #462
    #root@XPS13:/etc# du -hs /etc
    #22M	.
    #root@XPS13:/etc# du -hs /root/.basefs/logs/test 
    #5.9M	/root/.basefs/logs/test # not really optimized for space efficiency (base64 encoding + redundant information (hashes), can easily go down The number of output bytes per input byte is approximately 4 / 3 (33% overhead) and we use binary encoding for transmission, but debugging is more important
    if [[ $(whoami) != 'root' ]]; then
        echo "Root permissions are required for running basefs resources"
        exit 3
    fi
    mkdir -p $BASEFSPATH/tmp/perf
    # BaseFS
    mkdir -p /tmp/test;
    basefs genkey;
    basefs bootstrap -i 127.0.0.1 test -f;
#    echo '' > $BASEFSPATH/tmp/perf/node-0-resources
#    basefs resources test -l -r > $BASEFSPATH/tmp/perf/node-0-resources &
    # Load into fs cache
    grep -R "*" /etc/* > /dev/null
    { basefs mount test /tmp/test/ -s -f; } &
    trap "kill $! 2> /dev/null; kill $$ 2> /dev/null; killall basefs serf" INT
    sleep 3
    echo '' > $BASEFSPATH/tmp/perf/basefs-write
    echo '' > $BASEFSPATH/tmp/perf/basefs-read
    echo '' > $BASEFSPATH/tmp/perf/basefs-read
    for i in $(seq 1 30); do
#        echo "WRITE TEST $i" >> $BASEFSPATH/tmp/perf/node-0-resources
        { perf stat cp -r /etc/* /tmp/test/ > /dev/null; } 2>&1 | grep -v 'cp: cannot create symbolic link' >> $BASEFSPATH/tmp/perf/basefs-write
        # Cold read
        { perf stat grep -R "*" /tmp/test > /dev/null; } 2>> $BASEFSPATH/tmp/perf/basefs-read
        # Cached read
        { perf stat grep -R "*" /tmp/test > /dev/null; } 2>> $BASEFSPATH/tmp/perf/basefs-read2
    done
    killall basefs
    
    # SATA EXT4
    rm -r /media/data/tmp/test2
    mkdir -p /media/data/tmp/test2
    echo '' > $BASEFSPATH/tmp/perf/ext4-write
    echo '' > $BASEFSPATH/tmp/perf/ext4-read
    echo '' > $BASEFSPATH/tmp/perf/ext4-read2
    for i in $(seq 1 30); do
        { perf stat -a cp -r /etc/* /media/data/tmp/test2; } 2>> $BASEFSPATH/tmp/perf/ext4-write
        # cold start
        sync && echo 3 > /proc/sys/vm/drop_caches
        { perf stat -a grep -R "*" /media/data/tmp/test2 > /dev/null; } 2>> $BASEFSPATH/tmp/perf/ext4-read
        { perf stat -a grep -R "*" /media/data/tmp/test2 > /dev/null; } 2>> $BASEFSPATH/tmp/perf/ext4-read2
        sleep 2
    done
    # in-memory EXT4
    mkdir -p /tmp/test2
    echo '' > $BASEFSPATH/tmp/perf/mem-ext4-write
    echo '' > $BASEFSPATH/tmp/perf/mem-ext4-read
    echo '' > $BASEFSPATH/tmp/perf/mem-ext4-read2
    for i in $(seq 1 30); do
        { perf stat -a cp -r /etc/* /tmp/test2/; } 2>> $BASEFSPATH/tmp/perf/mem-ext4-write
        # cold start
        sync && echo 3 > /proc/sys/vm/drop_caches
        { perf stat -a grep -R "*" /tmp/test2 > /dev/null; } 2>> $BASEFSPATH/tmp/perf/mem-ext4-read
        { perf stat -a grep -R "*" /tmp/test2 > /dev/null; } 2>> $BASEFSPATH/tmp/perf/mem-ext4-read2
        sleep 3
    done
}


function basefsconv () {
    sed -i "s/^    MAX_BLOCK_MESSAGES = [0-9].*/    MAX_BLOCK_MESSAGES = 10/" $BASEFSPATH/basefs/gossip.py
    sed -i "s/^    FULL_SYNC_INTERVAL = [0-9].*/    FULL_SYNC_INTERVAL = 20/" $BASEFSPATH/basefs/sync.py
    nodes=29
    repetitions=${2:-20}
    cmd='sleep 5;
        basefs genkey;
        basefs get test ${docker_ip};
        basefs resources test -l -r > /mnt/tmp/logs/node-$ix-resources &
        mkdir -p /tmp/test;
        basefs mount test /tmp/test -d &> /mnt/tmp/logs/node-$ix'
    echo "Staring $(date)" > /tmp/eval_conv
    mkdir -p $BASEFSPATH/tmp/logs
    mkdir -p $BASEFSPATH/tmp/rounds
    echo "$cmd" "$nodes"
    dock "$cmd" "$nodes" &
    pid=$!
    cpid=$(pgrep -P $pid basefs)
    trap "kill -INT $cpid; kill $pid 2> /dev/null; bstop; killall basefs; kill $$ 2> /dev/null; kill $cpid;" INT
    sleep $(( $nodes*2 ))
    rounds=( 0 0 1 16 0 0 0 0 2 1 4 1 0 0 1 0 0 1 1 0 0 0 1 1 0 0 0 0 )
    counter=0
    ones=0
    twos=0
    fours=0
    sixteens=0
    for i in $(seq 1 $repetitions); do
        sleep 10
        for j in ${rounds[@]}; do
            # CP and sleep for 6 seconds
            case $j in
                0)
                    origin=$BASEFSPATH/tmp/testpoint/testfile2-0
                    ;;
                1)
                    origin=$BASEFSPATH/tmp/testpoint/testfile-1-$ones
                    ones=$(($ones+1))
                    ;;
                2)
                    origin=$BASEFSPATH/tmp/testpoint/testfile-2-$twos
                    twos=$(($twos+1))
                    ;;
                4)
                    origin=$BASEFSPATH/tmp/testpoint/testfile-4-$fours
                    fours=$(($fours+1))
                    ;;
                16)
                    origin=$BASEFSPATH/tmp/testpoint/testfile-16-$sixteens
                    sixteens=$(($sixteens+1))
                    ;;
            esac
            echo "$(date) cp $origin /tmp/test/testfile$counter-$i-$j" >> /tmp/eval_status
            cp $origin /tmp/test/testfile$counter-$i-$j
            sleep 3
            uid=$(grep " basefs.fs: Sending entry " $BASEFSPATH/tmp/logs/node-0 | tail -n 1 | sed -E "s#([^:]+)\s*2016/01/.*2016-01-#\12016-01-#" | awk {'print $7'})
            echo "UID $uid" >> /tmp/eval_conv
            sleep 3
            counter=$(($counter+1))
        done
    done
    sleep 300
    kill -INT $(ps aux|grep '/usr/local/bin/basefs mount test /tmp/test/ -iface docker0'|awk {'print $2'}|head -n 1)
    sleep 1
    kill -INT $(ps aux|grep '/usr/local/bin/basefs mount test /tmp/test/ -iface docker0'|awk {'print $2'}|head -n 1)
    bstop
    sleep 3
    bstop
    killall basefs
    trap - INT
    mv $BASEFSPATH/tmp/logs $BASEFSPATH/tmp/rounds/logs-1
    replace $BASEFSPATH/tmp/rounds/ $BASEFSPATH/tmp/basefs
}


if [[ $1 -eq 1 ]]; then
#    runconv gossip baseline
#    runconv basefs baseline
#    runconv gossip reorder 10
#    runconv basefs reorder 10
#    runconv gossip reorder 30
#    runconv basefs reorder 30
#    runconv gossip reorder 50
#    runconv basefs reorder 50
#    runconv gossip reorder 70
#    runconv basefs reorder 70
#    runconv gossip reorder 90
#    runconv basefs reorder 90
#    runconv gossip delay 10
#    runconv gossip bw 1024
#    runconv basefs bw 1024
#    runconv gossip delay 20
#    runconv gossip delay 40
#    runconv gossip bw 512
#    runconv basefs bw 512
#    runconv gossip delay 80
#    runconv gossip delay 160
#    runconv gossip loss 10
#    runconv basefs loss 10
#    runconv gossip loss 20
#    runconv basefs loss 20
#    runconv gossip bw 256
#    runconv basefs bw 256
#    runconv gossip delay 320
#    runconv gossip loss 30
#    runconv basefs loss 30
#    runconv gossip delay 640
#    runconv gossip loss 40
#    runconv basefs loss 40
#    runconv gossip delay 1280
#    runconv gossip loss 50
#    runconv basefs loss 50
#    runconv gossip bw 128
#    runconv basefs bw 128
#    runconv gossip bw 64
#    runconv basefs bw 54
#    runconv gossip bw 32
#    runconv basefs bw 32
#    runconv gossip loss 60
#    runconv basefs loss 60
#    runconv gossip delay 2560
#    runconv gossip loss 70
#    runconv basefs loss 70
#    runconv gossip loss 80
#    runconv basefs loss 80
#    runconv gossip loss 90
#    runconv basefs loss 90
#    runconv gossip delay 5120
#    runconv basefs delay 10
#    runconv basefs delay 20
#    runconv basefs delay 40
#    runconv basefs delay 80
#    runconv basefs delay 160
#    runconv basefs delay 320
#    runconv basefs delay 640
#    runconv basefs delay 1280
#    runconv basefs delay 2560
#    runconv gossip loss 40
#    runconv gossip loss 50
#    runconv gossip loss 60
#    runconv gossip loss 70
#    runconv gossip loss 80
#    runconv gossip bw 64
    runconv gossip bw 32
    runconv gossip delay 5120
    runconv basefs loss 60
    runconv basefs loss 70
    runconv basefs loss 80
    runconv basefs delay 5120
elif [[ $1 -eq 2 ]]; then
    resourceusage
elif [[ $1 -eq 3 ]]; then
    runconv "sync" baseline
    runconv "sync" loss 10
    runconv "sync" loss 20
    runconv "sync" loss 30
    runconv "sync" loss 40
    runconv "sync" loss 50
    runconv "sync" loss 60
    runconv "sync" loss 70
    runconv "sync" loss 80
elif [[ $1 -eq 4 ]]; then
    basefsconv

fi
